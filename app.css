.test {
  -webkit-transition: opacity 0.6s ease;
  transition: opacity 0.6s ease;
  opacity: 1;

}
 
.test:hover {
 opacity: 0.5;
}

.btn-container{
  position: relative;
}

.ani-button {
  z-index: 2;
  -webkit-transform: rotateY(0deg);
  -ms-transform: rotateY(0deg);
  -o-transform: rotateY(0deg);
  transform: rotateY(0deg);
//CSS의 transform을 이용하여 초기 상태를 Y축으로 0도로 회전시킨다.
  position: absolute;
  top: 8px;
  left: 12px;
}

.ani-button.ng-hide-remove{
//ngShow/ngHide 지시자는 적용된 DOM 요소가 안보이게 될 때 .ng-hide 클래스를 추가한다. 그리고 다시 보이게 될 때 .ng-hide를 제거하는데 제거 되기 직전에 .ng-hide-remove 클래스가 추가되게 된다. 이때 트랜지션 초기상태를 정의할 수 있다.
  -webkit-transition: 0.6s;
  -o-transition: 0.6s;
  transition: 0.6s;
//CSS Transition을 0.6초 동안 모든 속성의 변경값을 변경되도록 설정한다.
  -webkit-transform-style: preserve-3d;
  -moz-transform-style: preserve-3d;
  -ms-transform-style: preserve-3d;
  transform-style: preserve-3d; 
  position: absolute;
  top: 8px;
  left: 12px;
}

.ani-button.ng-hide{
//ngShow/ngHide 지시자가 속성으로 사용되어 해당 속성값의 표현식의 결과가 false/true가 되면 .ng-hide 클래스가 추가된다. 그때 해당 CSS 규칙이 적용된다.
  -webkit-transform: rotateY(90deg);
  -ms-transform: rotateY(90deg);
  -o-transform: rotateY(90deg);
  transform: rotateY(90deg);
//transform을 이용하여 Y축으로 90도 회전시킨다.
}


